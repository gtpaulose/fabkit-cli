version: "2.4"

# good samples here: https://github.com/yeasy/docker-compose-files/blob/master/hyperledger_fabric

services:
  peer-base:
    image: hyperledger/fabric-peer:${FABKIT_FABRIC_VERSION}
    restart: always
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - GODEBUG=netdns=go
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${FABKIT_DOCKER_NETWORK}
      - FABRIC_LOGGING_SPEC=info
      - CORE_CHAINCODE_LOGGING_SHIM=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=debug
      # - FABRIC_LOGGING_FORMAT="%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}"
      - CORE_PEER_ADDRESSAUTODETECT=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false # whether this node is the org leader, default to false
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=0.0.0.0:7051 # change to external addr for peers in other orgs
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443 # operation RESTful API
      - CORE_METRICS_PROVIDER=prometheus # prometheus will pull metrics from fabric via /metrics RESTful API
      - CORE_PEER_PROFILE_ENABLED=false
      - CORE_PEER_TLS_ENABLED=${FABKIT_TLS_ENABLED}
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv:${FABKIT_FABRIC_VERSION}
      - CORE_CHAINCODE_NODE_RUNTIME=hyperledger/fabric-nodeenv:${FABKIT_FABRIC_VERSION}
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    expose:
      - "7051" # gRPC
      - "9443" # Operation REST
    #command: bash -c 'bash /tmp/peer_build.sh; peer node start'
    command: peer node start

  orderer-base:
    image: hyperledger/fabric-orderer:${FABKIT_FABRIC_VERSION}
    restart: always
    environment:
      - GODEBUG=netdns=go
      - GRPC_VERBOSITY=info
      - FABRIC_LOGGING_SPEC=info
      # - FABRIC_LOGGING_FORMAT="%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}"
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file # default: provisional
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_LEDGERTYPE=file
      #- ORDERER_GENERAL_LEDGERTYPE=json  # default: file
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443 # operation RESTful API
      - ORDERER_METRICS_PROVIDER=prometheus # prometheus will pull metrics from orderer via /metrics RESTful API
      #- ORDERER_RAMLEDGER_HISTORY_SIZE=100  #only useful when use ram ledger
      - ORDERER_GENERAL_TLS_ENABLED=${FABKIT_TLS_ENABLED} # default: false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      # Only required by raft mode
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    expose:
      - "7050" # gRPC
      - "8443" # Operation REST
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    #command: bash -c 'bash /tmp/orderer_build.sh; orderer start' # use this if to debug orderer
    command: orderer start

  ca-base:
    image: hyperledger/fabric-ca:${FABKIT_FABRIC_CA_VERSION}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_TLS_ENABLED=${FABKIT_TLS_ENABLED}
    command: sh -c 'fabric-ca-server start --ca.certfile `ls /etc/hyperledger/fabric-ca-server-config/*.pem` --ca.keyfile `ls /etc/hyperledger/fabric-ca-server-config/*_sk` -b admin:adminpw -d'

  tools-base:
    image: hyperledger/fabric-tools:${FABKIT_FABRIC_VERSION}
    environment:
      - GODEBUG=netdns=go
      - FABRIC_LOGGING_SPEC=info
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${FABKIT_DOCKER_NETWORK}
      # - FABRIC_LOGGING_FORMAT=%{color}[%{id:03x} %{time:01-02 15:04:05.00 MST}] [%{module}] %{shortfunc} -> %{level:.4s}%{color:reset} %{message}
      - CORE_PEER_TLS_ENABLED=${FABKIT_TLS_ENABLED}
      - CORE_CHAINCODE_KEEPALIVE=10
      - FABKIT_SYS_CHANNEL=${FABKIT_SYS_CHANNEL}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash

  couchdb-base:
    image: ${FABKIT_COUCHDB_IMAGE}
    restart: always
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
